name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📥 Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: 🔍 Run ESLint
      working-directory: frontend
      run: npm run lint
      
    - name: 🧪 Run tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: 🏗️ Build application
      working-directory: frontend
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  # Backend Tests
  backend-test:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: spend_tracker_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📥 Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: 🔍 Run flake8
      working-directory: backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: 🧪 Run tests
      working-directory: backend
      env:
        MYSQL_HOST: localhost
        MYSQL_USER: root
        MYSQL_PASSWORD: testpassword
        MYSQL_DATABASE: spend_tracker_test
        SECRET_KEY: test-secret-key
      run: |
        python setup_database.py
        pytest --cov=. --cov-report=xml
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        
  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: 📧 Notify deployment
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        # Add notification logic (Slack, email, etc.)

  # Release
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: 📚 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🎉 New release of Spend Tracker!
          
          ## Changes
          - Auto-generated release from commit: ${{ github.event.head_commit.message }}
          
          ## Features
          - Full-stack finance tracking
          - Beautiful responsive UI
          - Advanced filtering and analytics
          
          ## Download
          Check out the [demo](https://your-demo-url.com) or clone the repository to get started!
        draft: false
        prerelease: false